/*
This sketch essentially adds a few robot movement functions to the example from shirriff's IR remote library,
in order to remotely control the robot using an IR remote. Based on which hex code is received from
the IR remote, the robot will activate one of the movement functions to move forward, backwards, left or
right. The adafruit neopixel library is also included in order to shine the onboard neopixel.
*/

#include <Adafruit_NeoPixel.h>
#include <Arduino.h>

#define PIN 4 // On Trinket or Gemma, suggest changing this to 1

// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS 1 // Popular NeoPixel ring size

// When setting up the NeoPixel library, we tell it how many pixels,
// and which pin to use to send signals. Note that for older NeoPixel
// strips you might need to change the third parameter -- see the
// strandtest example for more information on possible values.
Adafruit_NeoPixel rgbPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

/*
 * Specify which protocol(s) should be used for decoding.
 * If no protocol is defined, all protocols (except Bang&Olufsen) are active.
 * This must be done before the #include <IRremote.hpp>
 */

#define DECODE_NEC          // Includes Apple and Onkyo. To enable all protocols , just comment/disable this line.

//#define DECODE_DISTANCE_WIDTH // Universal decoder for pulse distance width protocols
//#define DECODE_HASH         // special decoder for all protocols

//#define DECODE_BEO          // This protocol must always be enabled manually, i.e. it is NOT enabled if no protocol is defined. It prevents decoding of SONY!

//#define DEBUG               // Activate this for lots of lovely debug output from the decoders.

//#define RAW_BUFFER_LENGTH  750 // For air condition remotes it requires 750. Default is 200.

/*
 * This include defines the actual pin number for pins like IR_RECEIVE_PIN, IR_SEND_PIN for many different boards and architectures
 */
#include "PinDefinitionsAndMore.h"
#include <IRremote.hpp> // include the library

long lastSignalTime = 0; // for shutting down the motors if there is no signal for 150ms
long speedDebounce = 0; // for preventing the speed change buttons from being spammed more than once every 250ms
int motorSpeed = 125;

const int stby = 3;
const int pwmA = 5; // right motor speed
const int pwmB = 6; // left motor speed
const int inA = 7;
const int inB = 8;

void forward(int speed) {
  analogWrite(pwmA, speed*0.91);
  digitalWrite(inA, 1);
  analogWrite(pwmB, speed*0.95);
  digitalWrite(inB, 1);
}

void backward(int speed) {
  analogWrite(pwmA, speed*0.91);
  digitalWrite(inA, 0);
  analogWrite(pwmB, speed*0.95);
  digitalWrite(inB, 0);
}

void stop() {
  analogWrite(pwmA, 0);
  analogWrite(pwmB, 0);
}

void left(int speed) {
  analogWrite(pwmA, speed);
  digitalWrite(inA, 1);
  analogWrite(pwmB, speed);
  digitalWrite(inB, 0);
}

void leftForward(int speed) {
  analogWrite(pwmA, speed);
  digitalWrite(inA, 1);
  analogWrite(pwmB, 0);
  digitalWrite(inB, 1);
}

void leftBackward(int speed) {
  analogWrite(pwmA, speed);
  digitalWrite(inA, 0);
  analogWrite(pwmB, 0);
  digitalWrite(inB, 0);
}

void right(int speed) {
  analogWrite(pwmA, speed);
  digitalWrite(inA, 0);
  analogWrite(pwmB, speed);
  digitalWrite(inB, 1);
}

void rightForward(int speed) {
  analogWrite(pwmA, 0);
  digitalWrite(inA, 1);
  analogWrite(pwmB, speed);
  digitalWrite(inB, 1);
}

void rightBackward(int speed) {
  analogWrite(pwmA, 0);
  digitalWrite(inA, 0);
  analogWrite(pwmB, speed);
  digitalWrite(inB, 0);
}

void setup() {
  pinMode(stby, OUTPUT);
  pinMode(pwmA, OUTPUT);
  pinMode(pwmB, OUTPUT);
  pinMode(inA, OUTPUT);
  pinMode(inB, OUTPUT);

  digitalWrite(stby, 1);

    Serial.begin(115200);
    while (!Serial)
        ; // Wait for Serial to become available. Is optimized away for some cores.

    // Just to know which program is running on my Arduino
    Serial.println(F("START " __FILE__ " from " __DATE__ "\r\nUsing library version " VERSION_IRREMOTE));

    // Start the receiver and if not 3. parameter specified, take LED_BUILTIN pin from the internal boards definition as default feedback LED
    IrReceiver.begin(9, ENABLE_LED_FEEDBACK);

    Serial.print(F("Ready to receive IR signals of protocols: "));
    printActiveIRProtocols(&Serial);
    Serial.println(F("at pin " STR(9)));

    rgbPixel.begin();
}

void loop() {
  rgbPixel.clear();
  
    /*
     * Check if received data is available and if yes, try to decode it.
     * Decoded result is in the IrReceiver.decodedIRData structure.
     *
     * E.g. command is in IrReceiver.decodedIRData.command
     * address is in command is in IrReceiver.decodedIRData.address
     * and up to 32 bit raw data in IrReceiver.decodedIRData.decodedRawData
     */
    if (IrReceiver.decode()) {

        /*
         * Print a summary of received data
         */
        if (IrReceiver.decodedIRData.protocol == UNKNOWN) {
            Serial.println(F("Received noise or an unknown (or not yet enabled) protocol"));
            // We have an unknown protocol here, print extended info
            IrReceiver.printIRResultRawFormatted(&Serial, true);
            IrReceiver.resume(); // Do it here, to preserve raw data for printing with printIRResultRawFormatted()
        } else {
            IrReceiver.resume(); // Early enable receiving of the next IR frame
            IrReceiver.printIRResultShort(&Serial);
            IrReceiver.printIRSendUsage(&Serial);
        }
        Serial.println();

        /*
         * Finally, check the received data and perform actions according to the received command
         */
        if (IrReceiver.decodedIRData.command == 0x46) {
            lastSignalTime = millis();
            forward(motorSpeed);
        } else if (IrReceiver.decodedIRData.command == 0x15) {
            lastSignalTime = millis();
            backward(motorSpeed);
        } else if (IrReceiver.decodedIRData.command == 0x44) {
            lastSignalTime = millis();
            left(motorSpeed);
        } else if (IrReceiver.decodedIRData.command == 0x43) {
            lastSignalTime = millis();
            right(motorSpeed);
        } else if (IrReceiver.decodedIRData.command == 0x40) {
            stop();
        }
        else if ((IrReceiver.decodedIRData.command == 0x42) && (millis() - speedDebounce >= 250)) {
          speedDebounce = millis(); // this code will only run if the last speed change happened more than 250ms earlier, to prevent spamming and make incrementing the speed easier.
          motorSpeed -= 25;
          rgbPixel.setPixelColor(0, rgbPixel.Color(66, 66, 66));
          if (motorSpeed<0) {motorSpeed = 0;} // create a lower limit for the motor speed
        }
        else if ((IrReceiver.decodedIRData.command == 0x4A) && (millis() - speedDebounce >= 250)) {
          speedDebounce = millis();
          motorSpeed += 25;
          rgbPixel.setPixelColor(0, rgbPixel.Color(66, 66, 66));
          if (motorSpeed>250) {motorSpeed = 250;} // create an upper limit for the motor speed
        }

    }
    // this code runs even if there is no signal received on this iteration of the loop
    if (millis() - lastSignalTime > 150) {
      stop();
      rgbPixel.setPixelColor(0, rgbPixel.Color(128, 0, 0));
    }
    else {
      rgbPixel.setPixelColor(0, rgbPixel.Color(0, 128, 0));
    }

    

    rgbPixel.show();   // Send the updated pixel colors to the hardware.
}
